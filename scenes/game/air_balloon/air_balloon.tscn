[gd_scene load_steps=19 format=3 uid="uid://o1jhpwkep6qb"]

[ext_resource type="Script" uid="uid://bqg5ick5ma6bq" path="res://scenes/game/air_balloon/air_balloon.gd" id="1_851m2"]
[ext_resource type="AudioStream" uid="uid://77gv61gfumx7" path="res://scenes/game/air_balloon/pop.ogg" id="2_xe7hi"]
[ext_resource type="Texture2D" uid="uid://dp7tref2b41ji" path="res://scenes/game/air_balloon/basket_spr.png" id="2_xf1nk"]
[ext_resource type="Texture2D" uid="uid://cqbh1soyw1ii2" path="res://scenes/game/air_balloon/balloon_popped_spr.png" id="3_ivjlr"]
[ext_resource type="Texture2D" uid="uid://doon0ivvj5jsi" path="res://scenes/game/air_balloon/fire.png" id="3_xj65t"]
[ext_resource type="Texture2D" uid="uid://dt5ll1eittct6" path="res://scenes/game/air_balloon/balloon_spr.png" id="4_4uhn6"]
[ext_resource type="Texture2D" uid="uid://yv1pfke4e4ly" path="res://scenes/game/air_balloon/balloon_popping.png" id="7_xe7hi"]

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_oaeym"]
radius = 36.0
height = 72.0

[sub_resource type="Shader" id="Shader_xe7hi"]
code = "shader_type canvas_item;

// With thanks to https://godotshaders.com/shader/2d-flag-wave-animetion-shader/
uniform float darkness       = 1.0;

uniform float amplitude       : hint_range(0.0, 20.0) = 5.0;   // Controls the height of the wave.
uniform float frequency       : hint_range(-10.0, 10.0) = 3.0;  // Sets the number of waves (negative values flip the wave).
uniform float speed           : hint_range(0.0, 5.0) = 1.0;    // Adjusts how fast the wave moves.
// 'pole_side' indicates where the flag is attached (the wave is reduced there):
// 0 = Left, 1 = Right, 2 = Top, 3 = Bottom.
uniform int pole_side         = 0;
uniform float fixed_edge_range: hint_range(0.0, 1.0) = 0.2;    // Determines the area where the wave is damped.

void fragment() {
    vec2 distorted_uv = UV; // Start with the original UV coordinates.
    float wave;             // Will hold the calculated wave offset.
    float influence;        // Factor that reduces the wave effect near the pole.

    // For top or bottom pole attachments, the wave moves vertically.
    if (pole_side == 2 || pole_side == 3) {
        // Use UV.x to drive the wave calculation and apply the offset along y.
        wave = sin(UV.x * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 2) {
            // If the flag is attached at the top:
            // Reduce the wave effect near the top edge (UV.y near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.x);
        } else {
            // If the flag is attached at the bottom:
            // Reduce the wave effect near the bottom edge (UV.y near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.x);
        }
        // Apply the calculated vertical displacement.
        distorted_uv.y += wave * influence;
    } else {
        // For left or right pole attachments, the wave moves horizontally.
        // Use UV.y to drive the wave calculation and apply the offset along x.
        wave = sin(UV.y * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 0) {
            // If the flag is attached on the left:
            // Reduce the wave effect near the left edge (UV.x near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.y);
        } else {
            // If the flag is attached on the right:
            // Reduce the wave effect near the right edge (UV.x near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.y);
        }
        // Apply the calculated horizontal displacement.
        distorted_uv.x += wave * influence;
    }

    // Retrieve the texture color from the modified UV coordinates.
    vec4 tex_color = texture(TEXTURE, distorted_uv);

    // Discard pixels that are nearly transparent.
    if (tex_color.a < 0.1) {
        discard;
    }

    // Output the final color.
    COLOR = tex_color / darkness;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xwiuu"]
shader = SubResource("Shader_xe7hi")
shader_parameter/darkness = 5.0
shader_parameter/amplitude = 2.0
shader_parameter/frequency = 2.0
shader_parameter/speed = 2.0
shader_parameter/pole_side = 4
shader_parameter/fixed_edge_range = 0.2

[sub_resource type="AtlasTexture" id="AtlasTexture_xwiuu"]
atlas = ExtResource("7_xe7hi")
region = Rect2(0, 0, 140, 140)

[sub_resource type="AtlasTexture" id="AtlasTexture_0ke65"]
atlas = ExtResource("7_xe7hi")
region = Rect2(140, 0, 140, 140)

[sub_resource type="AtlasTexture" id="AtlasTexture_npat6"]
atlas = ExtResource("7_xe7hi")
region = Rect2(280, 0, 140, 140)

[sub_resource type="SpriteFrames" id="SpriteFrames_xj65t"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_4uhn6")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_xwiuu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0ke65")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_npat6")
}, {
"duration": 1.0,
"texture": ExtResource("3_ivjlr")
}],
"loop": false,
"name": &"popped",
"speed": 15.0
}]

[sub_resource type="Shader" id="Shader_xj65t"]
code = "shader_type canvas_item;

// With thanks to https://godotshaders.com/shader/2d-flag-wave-animetion-shader/

uniform float amplitude       : hint_range(0.0, 20.0) = 5.0;   // Controls the height of the wave.
uniform float frequency       : hint_range(-10.0, 10.0) = 3.0;  // Sets the number of waves (negative values flip the wave).
uniform float speed           : hint_range(0.0, 5.0) = 1.0;    // Adjusts how fast the wave moves.
// 'pole_side' indicates where the flag is attached (the wave is reduced there):
// 0 = Left, 1 = Right, 2 = Top, 3 = Bottom.
uniform int pole_side         = 0;
uniform float fixed_edge_range: hint_range(0.0, 1.0) = 0.2;    // Determines the area where the wave is damped.

void fragment() {
    vec2 distorted_uv = UV; // Start with the original UV coordinates.
    float wave;             // Will hold the calculated wave offset.
    float influence;        // Factor that reduces the wave effect near the pole.

    // For top or bottom pole attachments, the wave moves vertically.
    if (pole_side == 2 || pole_side == 3) {
        // Use UV.x to drive the wave calculation and apply the offset along y.
        wave = sin(UV.x * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 2) {
            // If the flag is attached at the top:
            // Reduce the wave effect near the top edge (UV.y near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.x);
        } else {
            // If the flag is attached at the bottom:
            // Reduce the wave effect near the bottom edge (UV.y near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.x);
        }
        // Apply the calculated vertical displacement.
        distorted_uv.y += wave * influence;
    } else {
        // For left or right pole attachments, the wave moves horizontally.
        // Use UV.y to drive the wave calculation and apply the offset along x.
        wave = sin(UV.y * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 0) {
            // If the flag is attached on the left:
            // Reduce the wave effect near the left edge (UV.x near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.y);
        } else {
            // If the flag is attached on the right:
            // Reduce the wave effect near the right edge (UV.x near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.y);
        }
        // Apply the calculated horizontal displacement.
        distorted_uv.x += wave * influence;
    }

    // Retrieve the texture color from the modified UV coordinates.
    vec4 tex_color = texture(TEXTURE, distorted_uv);

    // Discard pixels that are nearly transparent.
    if (tex_color.a < 0.1) {
        discard;
    }

    // Output the final color.
    COLOR = tex_color;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_xe7hi"]
shader = SubResource("Shader_xj65t")
shader_parameter/amplitude = 5.0
shader_parameter/frequency = 5.0
shader_parameter/speed = 5.0
shader_parameter/pole_side = 4
shader_parameter/fixed_edge_range = 0.2

[sub_resource type="Shader" id="Shader_o6u2h"]
code = "shader_type canvas_item;

// With thanks to https://godotshaders.com/shader/2d-flag-wave-animetion-shader/
uniform float darkness       = 1.0;

uniform float amplitude       : hint_range(0.0, 20.0) = 5.0;   // Controls the height of the wave.
uniform float frequency       : hint_range(-10.0, 10.0) = 3.0;  // Sets the number of waves (negative values flip the wave).
uniform float speed           : hint_range(0.0, 5.0) = 1.0;    // Adjusts how fast the wave moves.
// 'pole_side' indicates where the flag is attached (the wave is reduced there):
// 0 = Left, 1 = Right, 2 = Top, 3 = Bottom.
uniform int pole_side         = 0;
uniform float fixed_edge_range: hint_range(0.0, 1.0) = 0.2;    // Determines the area where the wave is damped.

void fragment() {
    vec2 distorted_uv = UV; // Start with the original UV coordinates.
    float wave;             // Will hold the calculated wave offset.
    float influence;        // Factor that reduces the wave effect near the pole.

    // For top or bottom pole attachments, the wave moves vertically.
    if (pole_side == 2 || pole_side == 3) {
        // Use UV.x to drive the wave calculation and apply the offset along y.
        wave = sin(UV.x * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 2) {
            // If the flag is attached at the top:
            // Reduce the wave effect near the top edge (UV.y near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.x);
        } else {
            // If the flag is attached at the bottom:
            // Reduce the wave effect near the bottom edge (UV.y near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.x);
        }
        // Apply the calculated vertical displacement.
        distorted_uv.y += wave * influence;
    } else {
        // For left or right pole attachments, the wave moves horizontally.
        // Use UV.y to drive the wave calculation and apply the offset along x.
        wave = sin(UV.y * frequency + TIME * speed) * amplitude * 0.01;
        if (pole_side == 0) {
            // If the flag is attached on the left:
            // Reduce the wave effect near the left edge (UV.x near 0).
            influence = smoothstep(0.0, fixed_edge_range, UV.y);
        } else {
            // If the flag is attached on the right:
            // Reduce the wave effect near the right edge (UV.x near 1).
            influence = 1.0 - smoothstep(1.0 - fixed_edge_range, 1.0, UV.y);
        }
        // Apply the calculated horizontal displacement.
        distorted_uv.x += wave * influence;
    }

    // Retrieve the texture color from the modified UV coordinates.
    vec4 tex_color = texture(TEXTURE, distorted_uv);

    // Discard pixels that are nearly transparent.
    if (tex_color.a < 0.1) {
        discard;
    }

    // Output the final color.
    COLOR = tex_color / darkness;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_o6u2h"]
shader = SubResource("Shader_o6u2h")
shader_parameter/darkness = 1.0
shader_parameter/amplitude = 2.0
shader_parameter/frequency = 2.0
shader_parameter/speed = 2.0
shader_parameter/pole_side = 4
shader_parameter/fixed_edge_range = 0.2

[node name="AirBalloon" type="Area2D"]
script = ExtResource("1_851m2")
bounds = 500.0
speed = 200.0

[node name="Pop" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("2_xe7hi")
volume_db = 7.172

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(1, -3)
shape = SubResource("CapsuleShape2D_oaeym")

[node name="LineL" type="Line2D" parent="."]
position = Vector2(0, -50)
points = PackedVector2Array(-35, 52, -24, -9)
width = 1.0

[node name="LineR" type="Line2D" parent="."]
position = Vector2(0, -50)
points = PackedVector2Array(37, 50, 6, -9)
width = 1.0

[node name="Shadow" type="Node2D" parent="."]
position = Vector2(16, 16)

[node name="basket" type="Node2D" parent="Shadow"]
modulate = Color(0, 0, 0, 0.12549)
position = Vector2(0, -1)

[node name="basket" type="Sprite2D" parent="Shadow/basket"]
position = Vector2(0, -31)
texture = ExtResource("2_xf1nk")

[node name="balloon" type="Node2D" parent="Shadow"]
modulate = Color(0, 0, 0, 0.12549)
position = Vector2(0, -1)

[node name="balloon_graphics" type="AnimatedSprite2D" parent="Shadow/balloon"]
material = SubResource("ShaderMaterial_xwiuu")
position = Vector2(0, -190)
scale = Vector2(2, 2)
sprite_frames = SubResource("SpriteFrames_xj65t")
animation = &"popped"
autoplay = "default"
frame = 3
frame_progress = 1.0
metadata/_edit_use_anchors_ = true

[node name="basket" type="Node2D" parent="."]
position = Vector2(0, -1)

[node name="fire" type="Node2D" parent="basket"]
position = Vector2(0, -23)

[node name="Fire" type="Sprite2D" parent="basket/fire"]
material = SubResource("ShaderMaterial_xe7hi")
position = Vector2(0, -12)
texture = ExtResource("3_xj65t")

[node name="basket" type="Sprite2D" parent="basket"]
position = Vector2(0, -31)
texture = ExtResource("2_xf1nk")

[node name="AttachL2" type="Node2D" parent="basket"]
position = Vector2(-33, 1)

[node name="AttachR2" type="Node2D" parent="basket"]
position = Vector2(34, 1)

[node name="balloon" type="Node2D" parent="."]
position = Vector2(0, -1)

[node name="balloon_graphics" type="AnimatedSprite2D" parent="balloon"]
material = SubResource("ShaderMaterial_o6u2h")
position = Vector2(0, -187)
scale = Vector2(2, 2)
sprite_frames = SubResource("SpriteFrames_xj65t")
animation = &"popped"
autoplay = "default"
frame = 3
frame_progress = 1.0
metadata/_edit_use_anchors_ = true

[node name="AttachL" type="Node2D" parent="balloon/balloon_graphics"]
position = Vector2(-7.5, 64)
scale = Vector2(0.5, 0.5)

[node name="AttachR" type="Node2D" parent="balloon/balloon_graphics"]
position = Vector2(6, 64)
scale = Vector2(0.5, 0.5)

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
